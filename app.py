import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt


def mean_weighted(values, probs):
    # M[X] = Œ£ x·µ¢ * p·µ¢
    return sum(x * p for x, p in zip(values, probs))

def variance_weighted(values, probs):
    # D[X] = Œ£ p·µ¢ * (x·µ¢ - M[X])¬≤
    mean = mean_weighted(values, probs)
    return sum(p * (x - mean)**2 for x, p in zip(values, probs))

def std_dev_weighted(values, probs):
    return variance_weighted(values, probs)**0.5

def create_empirical_function_text(data):
    """–°—Ç–≤–æ—Ä—é—î —Ç–µ–∫—Å—Ç–æ–≤–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –µ–º–ø—ñ—Ä–∏—á–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó —Ä–æ–∑–ø–æ–¥—ñ–ª—É"""
    n = len(data)
    sorted_data = sorted(set(data))
    
    function_parts = []
    
    # –î–æ–¥–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—É —á–∞—Å—Ç–∏–Ω—É (F(x) = 0 –¥–ª—è x <= min)
    function_parts.append(f"0, x ‚â§ {sorted_data[0]:.1f}")
    
    # –û–±—á–∏—Å–ª—é—î–º–æ –∫—É–º—É–ª—è—Ç–∏–≤–Ω—ñ —á–∞—Å—Ç–æ—Ç–∏
    for i, value in enumerate(sorted_data):
        count = sum(1 for x in data if x <= value)
        freq = count / n
        
        if i < len(sorted_data) - 1:
            next_value = sorted_data[i + 1]
            function_parts.append(f"{freq:.2f}, {value:.1f} < x ‚â§ {next_value:.1f}")
        else:
            # –û—Å—Ç–∞–Ω–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª
            function_parts.append(f"1, x > {value:.1f}")
    
    return function_parts

# --- Streamlit —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---

st.set_page_config(page_title="–°—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑", layout="wide")
st.title("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –µ–º–ø—ñ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö")

# –í–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
st.header("1Ô∏è‚É£ –í–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö")
data_input = st.text_area(
    "–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∫–æ–º—É –∞–±–æ –ø—Ä–æ–±—ñ–ª (—è–∫—â–æ –±–∞–∂–∞—î—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä–æ–±–æ–≤–µ —á–∏—Å–ª–æ, —Ç–æ –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ —á–µ—Ä–µ–∑ –∫—Ä–∞–ø–∫—É):",
    height=100,
    placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 2, 4, 4, 5, 7, 8, 8, 8, 9"
)

uploaded_file = st.file_uploader(
    "–ê–±–æ –∑–∞–≤–∞–Ω—Ç–∞–∂ CSV-—Ñ–∞–π–ª –∑ –æ–¥–Ω–∏–º —Å—Ç–æ–≤–ø—Ü–µ–º —á–∏—Å–µ–ª",
    type=["csv"]
)

data = []
if uploaded_file:
    df = pd.read_csv(uploaded_file, header=None)
    data = df.iloc[:, 0].dropna().astype(float).tolist()
elif data_input:
    try:
        data = list(map(float, data_input.replace(",", " ").split()))
    except:
        st.error("–ü–æ–º–∏–ª–∫–∞ —É –≤–≤–µ–¥–µ–Ω–Ω—ñ. –ü–µ—Ä–µ–≤—ñ—Ä—å, —á–∏ –≤—Å—ñ –∑–Ω–∞—á–µ–Ω–Ω—è ‚Äî —á–∏—Å–ª–∞.")

if data:
    data = sorted(data)
    n = len(data)
    st.success(f"–£—Å–ø—ñ—à–Ω–æ –∑—á–∏—Ç–∞–Ω–æ {n} –∑–Ω–∞—á–µ–Ω—å.")
    
    # –¢–∞–±–ª–∏—Ü—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω–∏—Ö —Ä–æ–∑–ø–æ–¥—ñ–ª—ñ–≤
    st.header("2Ô∏è‚É£ –¢–∞–±–ª–∏—Ü—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω–∏—Ö —Ä–æ–∑–ø–æ–¥—ñ–ª—ñ–≤")
    values, counts = np.unique(data, return_counts=True)
    rel_freqs = counts / n
    
    cum_freqs = np.concatenate([[0], np.cumsum(counts)[:-1], [np.sum(counts)]])
    rel_cum_freqs = np.concatenate([[0], np.cumsum(rel_freqs)[:-1], [1.0]])
    
    extended_values = list(values) + [""]
    extended_counts = list(counts) + [""]
    extended_rel_freqs = list(rel_freqs) + [""]
    
    df_stats = pd.DataFrame({
        val: [ni, rfi, cfi, rcfi]
        for val, ni, rfi, cfi, rcfi in zip(extended_values, extended_counts, extended_rel_freqs, cum_freqs, rel_cum_freqs)
    }, index=[
        "–ß–∞—Å—Ç–æ—Ç–∞ (n·µ¢)",
        "–í—ñ–¥–Ω–æ—Å–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞ (n·µ¢/n)",
        "–ù–∞–∫–æ–ø–∏—á—É–≤–∞–ª—å–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞",
        "–í—ñ–¥–Ω–æ—Å–Ω–∞ –Ω–∞–∫–æ–ø–∏—á—É–≤–∞–ª—å–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞"
    ])
    
    st.dataframe(df_stats, use_container_width=True)
    
    # –ü–æ–ª—ñ–≥–æ–Ω–∏ —á–∞—Å—Ç–æ—Ç
    st.header("3Ô∏è‚É£ –ì—Ä–∞—Ñ—ñ—á–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏")
    fig, ax = plt.subplots(figsize=(5, 3))
    ax.plot(values, counts, marker="o", label="–ü–æ–ª—ñ–≥–æ–Ω —á–∞—Å—Ç–æ—Ç")
    ax.plot(values, rel_freqs * n, marker="x", linestyle="--", label="–ü–æ–ª—ñ–≥–æ–Ω –≤—ñ–¥–Ω–æ—Å–Ω–∏—Ö —á–∞—Å—Ç–æ—Ç")
    ax.set_title("–ü–æ–ª—ñ–≥–æ–Ω–∏ —á–∞—Å—Ç–æ—Ç", fontsize=10)
    ax.set_xlabel("–ó–Ω–∞—á–µ–Ω–Ω—è", fontsize=9)
    ax.set_ylabel("–ß–∞—Å—Ç–æ—Ç–∞", fontsize=9)
    ax.grid(True)
    ax.legend(fontsize=8)
    st.pyplot(fig)
    
    # –ï–º–ø—ñ—Ä–∏—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ä–æ–∑–ø–æ–¥—ñ–ª—É
    st.subheader("–ï–º–ø—ñ—Ä–∏—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ä–æ–∑–ø–æ–¥—ñ–ª—É")
    
    # –¢–µ–∫—Å—Ç–æ–≤–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó
    function_parts = create_empirical_function_text(data)
    
    # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó
    function_text = "F*(x) = {\n"
    for part in function_parts:
        function_text += f"    {part}\n"
    function_text += "}"
    
    st.code(function_text, language="text")
    
    # –ì—Ä–∞—Ñ—ñ–∫ –µ–º–ø—ñ—Ä–∏—á–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
    def empirical_cdf(x, data):
        return sum(1 for val in data if val <= x) / len(data)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–æ—á–∫–∏ –¥–ª—è —Å—Ç—Ä–∏–±–∫–æ–ø–æ–¥—ñ–±–Ω–æ–≥–æ –≥—Ä–∞—Ñ—ñ–∫–∞
    unique_values = sorted(set(data))
    x_points = []
    y_points = []
    
    # –î–æ–¥–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—É —Ç–æ—á–∫—É
    x_min = min(data) - 1
    x_points.extend([x_min, unique_values[0]])
    y_points.extend([0, 0])
    
    # –î–æ–¥–∞—î–º–æ —Å—Ç—Ä–∏–±–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è
    for i, value in enumerate(unique_values):
        cdf_value = empirical_cdf(value, data)
        
        # –î–æ–¥–∞—î–º–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É –ª—ñ–Ω—ñ—é –¥–æ —Å—Ç—Ä–∏–±–∫–∞
        if i > 0:
            x_points.append(value)
            y_points.append(y_points[-1])
        
        # –î–æ–¥–∞—î–º–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∏–π —Å—Ç—Ä–∏–±–æ–∫
        x_points.append(value)
        y_points.append(cdf_value)
        
        # –î–æ–¥–∞—î–º–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É –ª—ñ–Ω—ñ—é –ø—ñ—Å–ª—è —Å—Ç—Ä–∏–±–∫–∞
        if i < len(unique_values) - 1:
            next_value = unique_values[i + 1]
            x_points.append(next_value)
            y_points.append(cdf_value)
    
    # –î–æ–¥–∞—î–º–æ –∫—ñ–Ω—Ü–µ–≤—É —Ç–æ—á–∫—É
    x_max = max(data) + 1
    x_points.append(x_max)
    y_points.append(1.0)
    
    fig2, ax2 = plt.subplots(figsize=(8, 5))
    ax2.plot(x_points, y_points, 'b-', linewidth=2)
    
    for value in unique_values:
        cdf_before = empirical_cdf(value - 0.001, data) if value > min(data) else 0
        cdf_at = empirical_cdf(value, data)
        
        if cdf_before < cdf_at:
            ax2.plot(value, cdf_before, 'wo', markersize=4, markeredgecolor='blue')
            ax2.plot(value, cdf_at, 'bo', markersize=4)
        
        ax2.axvline(x=value, color='gray', linestyle=':', alpha=0.5)
        
        if cdf_at < 1.0: 
            arrow_length = (max(data) - min(data)) * 0.02
            ax2.annotate('', xy=(value + arrow_length, cdf_at), 
                        xytext=(value, cdf_at),
                        arrowprops=dict(arrowstyle='->', color='black', lw=1.5))
    
    final_value = max(unique_values)
    final_x = final_value + (max(data) - min(data)) * 0.05
    ax2.annotate('', xy=(final_x, 1.0), xytext=(final_value, 1.0),
                arrowprops=dict(arrowstyle='->', color='black', lw=1.5))
    
    ax2.set_title("–ï–º–ø—ñ—Ä–∏—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ä–æ–∑–ø–æ–¥—ñ–ª—É", fontsize=12)
    ax2.set_xlabel("x", fontsize=10)
    ax2.set_ylabel("F*(x)", fontsize=10)
    ax2.grid(True, alpha=0.3)
    ax2.set_ylim(-0.05, 1.05)
    st.pyplot(fig2)
    
    # –Ü–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∏–π —Ä–æ–∑–ø–æ–¥—ñ–ª (–≥—ñ—Å—Ç–æ–≥—Ä–∞–º–∞)
    st.header("4Ô∏è‚É£ –Ü–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∏–π —Ä–æ–∑–ø–æ–¥—ñ–ª")
    
    # –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤
    st.subheader("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤")
    col1, col2 = st.columns(2)
    
    with col1:
        default_m = int(np.floor(np.sqrt(n)))
        m = st.number_input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤ (m):", min_value=2, max_value=20, value=default_m)
    
    with col2:
        st.write(f"–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å (‚åä‚àön‚åã): {default_m}")
    
    # –û–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤
    r = max(data) - min(data)
    h = r / m
    
    st.write(f"**–†–æ–∑–º–∞—Ö (R):** {r:.3f}")
    st.write(f"**–î–æ–≤–∂–∏–Ω–∞ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É (h):** {h:.3f}")
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤
    bin_edges = np.linspace(min(data), max(data), m + 1)
    
    # –¢–∞–±–ª–∏—Ü—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤
    st.subheader("–¢–∞–±–ª–∏—Ü—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∑–ø–æ–¥—ñ–ª—É")
    
    # –û–±—á–∏—Å–ª—é—î–º–æ —á–∞—Å—Ç–æ—Ç–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É
    hist_counts, _ = np.histogram(data, bins=bin_edges)
    hist_rel_freqs = hist_counts / n
    hist_densities = hist_counts / (n * h)  # –©—ñ–ª—å–Ω—ñ—Å—Ç—å —á–∞—Å—Ç–æ—Ç–∏
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é
    intervals = []
    midpoints = []
    for i in range(len(bin_edges) - 1):
        interval_str = f"[{bin_edges[i]:.2f}, {bin_edges[i+1]:.2f})"
        if i == len(bin_edges) - 2:
            interval_str = f"[{bin_edges[i]:.2f}, {bin_edges[i+1]:.2f}]"
        intervals.append(interval_str)
        midpoints.append((bin_edges[i] + bin_edges[i+1]) / 2)
    
    # –ù–∞–∫–æ–ø–∏—á—É–≤–∞–ª—å–Ω—ñ —á–∞—Å—Ç–æ—Ç–∏ –¥–ª—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤
    cum_interval_freqs = np.cumsum(hist_counts)
    rel_cum_interval_freqs = cum_interval_freqs / n
    
    df_intervals = pd.DataFrame({
        "–Ü–Ω—Ç–µ—Ä–≤–∞–ª": intervals,
        "–°–µ—Ä–µ–¥–∏–Ω–∞ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É": [f"{mp:.2f}" for mp in midpoints],
        "–ß–∞—Å—Ç–æ—Ç–∞ (n·µ¢)": hist_counts,
        "–í—ñ–¥–Ω–æ—Å–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞": [f"{rf:.3f}" for rf in hist_rel_freqs],
        "–©—ñ–ª—å–Ω—ñ—Å—Ç—å —á–∞—Å—Ç–æ—Ç–∏": [f"{d:.3f}" for d in hist_densities],
        "–ù–∞–∫–æ–ø–∏—á—É–≤–∞–ª—å–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞": cum_interval_freqs,
        "–í—ñ–¥–Ω. –Ω–∞–∫–æ–ø–∏—á. —á–∞—Å—Ç–æ—Ç–∞": [f"{rcf:.3f}" for rcf in rel_cum_interval_freqs]
    })
    
    st.dataframe(df_intervals, use_container_width=True)
    
    # –ì—ñ—Å—Ç–æ–≥—Ä–∞–º–∞
    st.subheader("–ì—ñ—Å—Ç–æ–≥—Ä–∞–º–∞")
    fig3, ax3 = plt.subplots(figsize=(10, 6))
    ax3.hist(data, bins=bin_edges, edgecolor='black', alpha=0.7, color='pink')
    ax3.set_xticks(bin_edges.round(2))
    ax3.set_xticklabels([f"{edge:.2f}" for edge in bin_edges], rotation=45)
    ax3.set_title("–ì—ñ—Å—Ç–æ–≥—Ä–∞–º–∞ —á–∞—Å—Ç–æ—Ç", fontsize=12)
    ax3.set_xlabel("–ó–Ω–∞—á–µ–Ω–Ω—è", fontsize=10)
    ax3.set_ylabel("–ß–∞—Å—Ç–æ—Ç–∞", fontsize=10)
    ax3.grid(True, alpha=0.3)
    st.pyplot(fig3)
    
    st.header("5Ô∏è‚É£ –ß–∏—Å–ª–æ–≤—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏")
    mean = mean_weighted(values, rel_freqs)
    variance = variance_weighted(values, rel_freqs)
    std_dev = std_dev_weighted(values, rel_freqs)
    
    median = np.median(data)
    mode = max(set(data), key=data.count)
    
    st.markdown(f"""
    - üìå **–ú–æ–¥–∞:** {mode}
    - üìå **–ú–µ–¥—ñ–∞–Ω–∞:** {median:.3f}
    - üìå **–ú–∞—Ç–µ–º–∞—Ç–∏—á–Ω–µ —Å–ø–æ–¥—ñ–≤–∞–Ω–Ω—è (–æ—á—ñ–∫—É–≤–∞–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è):** {mean:.3f}
    - üìå **–î–∏—Å–ø–µ—Ä—Å—ñ—è:** {variance:.3f}
    - üìå **–°–µ—Ä–µ–¥–Ω—å–æ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è:** {std_dev:.3f}
    """)
else:
    st.info("–í–≤–µ–¥—ñ—Ç—å –∞–±–æ –∑–∞–≤–∞–Ω—Ç–∞–∂ –¥–∞–Ω—ñ, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏.")